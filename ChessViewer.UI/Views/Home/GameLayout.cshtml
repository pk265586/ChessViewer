@using ChessViewer.UI.Static
@using ChessViewer.UI.Models
@model PlayGameModel

@{
    const int cellSize = 50;
    const int borderSize = 20;
}

<div class="container-fluid">
    <div class="row panel">
        @if (Model != null && Model.Moves != null && Model.Moves.Length > 0)
        {
            <div style="overflow-y: scroll; border: 1px solid black; min-width: 100px; width: auto">
                <table id="game-notation">
                    @foreach (var move in Model.Moves)
                    {
                        <tr>
                            <td id="notation-number-@move.MoveNumber" style="font-weight: bold"> @move.MoveNumber </td>
                            <td id="notation-white-@move.MoveNumber"> @move.WhiteFrom - @move.WhiteTo </td>
                            <td id="notation-black-@move.MoveNumber"> @move.BlackFrom - @move.BlackTo </td>
                        </tr>
                    }
                </table>
            </div>
        }

        @helper HorizontalBorder(int borderSize, int cellSize)
        {
            <tr>
                <td width="@borderSize" height="@borderSize" class="chessboard-border"></td>
                @for (int x = 1; x <= 8; x++)
                {
                    <td width="@cellSize" height="@borderSize" class="chessboard-border">
                        @((char)('A' + x - 1))
                    </td>
                }
                <td width="@borderSize" height="@borderSize" class="chessboard-border"></td>
            </tr>
        }

        <div style="width: auto ">
            <table>
                @HorizontalBorder(borderSize, cellSize)

                @for (int y = 8; y >= 1; y--)
                {
                    <tr>
                        <td width="@borderSize" height="@cellSize" class="chessboard-border"> @y </td>
                        @for (int x = 1; x <= 8; x++)
                        {
                            <td id="square-@((char)('a' + x - 1))@y" width="@cellSize" height="@cellSize" style="background-color: @ChessRender.GetSquareColor(x,y)"> </td>
                        }
                        <td width="@borderSize" height="@cellSize" class="chessboard-border"> @y </td>
                    </tr>
                }

                @HorizontalBorder(borderSize, cellSize)

            </table>
        </div>

    </div>
</div>

